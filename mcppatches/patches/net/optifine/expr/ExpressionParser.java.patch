--- a/net/optifine/expr/ExpressionParser.java
+++ b/net/optifine/expr/ExpressionParser.java
@@ -59,7 +59,7 @@
             }
             else
             {
-                Deque<Token> deque = new ArrayDeque<>(Arrays.asList(atoken));
+                Deque<Token> deque = new ArrayDeque<Token>(Arrays.asList(atoken));
                 return this.parseInfix(deque);
             }
         }
@@ -77,8 +77,8 @@
         }
         else
         {
-            List<IExpression> list = new LinkedList<>();
-            List<Token> list1 = new LinkedList<>();
+            List<IExpression> list = new LinkedList<IExpression>();
+            List<Token> list1 = new LinkedList<Token>();
             IExpression iexpression = this.parseExpression(deque);
             checkNull(iexpression, "Missing expression");
             list.add(iexpression);
@@ -107,7 +107,7 @@
 
     private IExpression makeInfix(List<IExpression> listExpr, List<Token> listOper) throws ParseException
     {
-        List<FunctionType> list = new LinkedList<>();
+        List<FunctionType> list = new LinkedList<FunctionType>();
 
         for (Token token : listOper)
         {
@@ -244,9 +244,9 @@
 
     private FunctionType getFunctionType(Token token, Deque<Token> deque) throws ParseException
     {
-        Token token = deque.peek();
+        Token tokennext = deque.peek();
 
-        if (token != null && token.getType() == TokenType.BRACKET_OPEN)
+        if (tokennext != null && tokennext.getType() == TokenType.BRACKET_OPEN)
         {
             FunctionType functiontype1 = FunctionType.parse(token.getText());
             checkNull(functiontype1, "Unknown function: " + token);
@@ -271,11 +271,11 @@
         }
     }
 
-    private IExpression makeFunction(FunctionType type, Deque<Token> deque) throws ParseException
+    private IExpression makeFunction(FunctionType type, Deque<Token> dequep) throws ParseException
     {
         if (type.getParameterCount(new IExpression[0]) == 0)
         {
-            Token token = deque.peek();
+            Token token = dequep.peek();
 
             if (token == null || token.getType() != TokenType.BRACKET_OPEN)
             {
@@ -283,24 +283,24 @@
             }
         }
 
-        Token token1 = deque.poll();
-        Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
+        Token token1 = dequep.poll();
+        Deque<Token> deque = getGroup(dequep, TokenType.BRACKET_CLOSE, true);
         IExpression[] aiexpression = this.parseExpressions(deque);
         return makeFunction(type, aiexpression);
     }
 
-    private IExpression[] parseExpressions(Deque<Token> deque) throws ParseException
+    private IExpression[] parseExpressions(Deque<Token> dequep) throws ParseException
     {
-        List<IExpression> list = new ArrayList<>();
+        List<IExpression> list = new ArrayList<IExpression>();
 
         while (true)
         {
-            Deque<Token> deque = getGroup(deque, TokenType.COMMA, false);
-            IExpression iexpression = this.parseInfix(deque);
+            Deque<Token> deque = getGroup(dequep, TokenType.COMMA, false);
+            IExpression iexpression = this.parseInfix(dequep);
 
             if (iexpression == null)
             {
-                IExpression[] aiexpression = list.toArray(new IExpression[list.size()]);
+                IExpression[] aiexpression = (IExpression[])list.toArray(new IExpression[list.size()]);
                 return aiexpression;
             }
 
@@ -370,15 +370,15 @@
         }
     }
 
-    private IExpression makeBracketed(Token token, Deque<Token> deque) throws ParseException
+    private IExpression makeBracketed(Token token, Deque<Token> dequep) throws ParseException
     {
-        Deque<Token> deque = getGroup(deque, TokenType.BRACKET_CLOSE, true);
+        Deque<Token> deque = getGroup(dequep, TokenType.BRACKET_CLOSE, true);
         return this.parseInfix(deque);
     }
 
-    private static Deque<Token> getGroup(Deque<Token> deque, TokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException
+    private static Deque<Token> getGroup(Deque<Token> dequep, TokenType tokenTypeEnd, boolean tokenEndRequired) throws ParseException
     {
-        Deque<Token> deque = new ArrayDeque<>();
+        Deque<Token> deque = new ArrayDeque<Token>();
         int i = 0;
         Iterator iterator = deque.iterator();
 
