--- a/net/minecraft/entity/player/EntityPlayerMP.java
+++ b/net/minecraft/entity/player/EntityPlayerMP.java
@@ -2,6 +2,7 @@
 
 import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
+
 import io.netty.buffer.Unpooled;
 import io.netty.util.concurrent.GenericFutureListener;
 import java.util.Collection;
@@ -24,10 +25,13 @@
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IMerchant;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.passive.AbstractHorse;
 import net.minecraft.entity.projectile.EntityArrow;
 import net.minecraft.init.Items;
 import net.minecraft.init.MobEffects;
+import net.minecraft.init.Particles;
+import net.minecraft.init.PotionTypes;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerChest;
@@ -36,6 +40,7 @@
 import net.minecraft.inventory.IContainerListener;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.inventory.SlotCrafting;
+import net.minecraft.item.EnumAction;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemMapBase;
 import net.minecraft.item.ItemStack;
@@ -72,7 +77,9 @@
 import net.minecraft.network.play.server.SPacketUseBed;
 import net.minecraft.network.play.server.SPacketWindowItems;
 import net.minecraft.network.play.server.SPacketWindowProperty;
+import net.minecraft.particles.ItemParticleData;
 import net.minecraft.potion.PotionEffect;
+import net.minecraft.potion.PotionUtils;
 import net.minecraft.scoreboard.IScoreCriteria;
 import net.minecraft.scoreboard.Score;
 import net.minecraft.scoreboard.ScorePlayerTeam;
@@ -113,6 +120,8 @@
 import net.minecraft.world.storage.loot.ILootContainer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.VivePlayer;
 
 public class EntityPlayerMP extends EntityPlayer implements IContainerListener
 {
@@ -365,6 +374,19 @@
     public void addSelfToInternalCraftingInventory()
     {
         this.openContainer.addListener(this);
+
+    	VivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+    	if(vp!=null && vp.isVR()){
+    		if(rand.nextInt(20) == 3){
+				ItemStack stack;
+    			if (rand.nextInt(2) == 1)
+    				stack = new ItemStack(Items.PUMPKIN_PIE).setDisplayName(new TextComponentString("EAT ME"));
+    			else
+					stack = PotionUtils.addPotionToItemStack(new ItemStack(Items.POTION), PotionTypes.WATER).setDisplayName(new TextComponentString("DRINK ME"));
+				if(this.inventory.addItemStackToInventory(stack))
+					this.inventoryContainer.detectAndSendChanges();
+    		}
+    	}
     }
 
     /**
@@ -1608,7 +1630,152 @@
     {
         return this.enteredNetherPosition;
     }
+    @Override
+    public EntityItem dropItem(ItemStack droppedItem, boolean dropAround, boolean traceItem)
+    {
+    	VivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+    	if(vp == null || vp.isVR() == false){
+    		return super.dropItem(droppedItem, dropAround, traceItem);
+    	} else {
+
+    		if (droppedItem.isEmpty())
+    		{
+    			return null;
+    		}
+    		else
+    		{
+    			double d0 = this.posY - 0.30000001192092896D + (double)this.getEyeHeight();
+    			EntityItem entityitem;
+
+
+    			//VIVE use controller
+    			Vec3d pos = vp.getControllerPos(0);    	
+    			Vec3d aim = vp.getControllerDir(0);
+    			
+    			entityitem = new EntityItem(this.world, pos.x + aim.x*0.2f, pos.y+aim.y*0.2f-0.2f, pos.z+aim.z*0.2f, droppedItem);
+    			    			
+    			entityitem.setPickupDelay(40);
+
+    			if (traceItem)
+    			{
+    				entityitem.setThrowerId(this.getUniqueID());
+    			}
+
+    			if (dropAround)
+    			{
+    				float f = this.rand.nextFloat() * 0.5F;
+    				float f1 = this.rand.nextFloat() * ((float)Math.PI * 2F);
+    				entityitem.motionX = (double)(-MathHelper.sin(f1) * f);
+    				entityitem.motionZ = (double)(MathHelper.cos(f1) * f);
+    				entityitem.motionY = 0.20000000298023224D;
+    			}
+    			else
+    			{
+
+    				float f2 = 0.3F;
+
+//    	    		float pitch = (float)Math.toDegrees(Math.asin(aim.y/aim.lengthVector()));
+//    	    		float yaw = (float)Math.toDegrees(Math.atan2(-aim.x, aim.z));   
+    				
+    	    		//vive use controller
+    	    		entityitem.motionX = aim.x * f2;
+    	    		entityitem.motionZ = aim.z * f2;
+    	    		entityitem.motionY = aim.y * f2;
+   				
+        			entityitem.setPosition(entityitem.posX + entityitem.motionX, entityitem.posY+entityitem.motionY, entityitem.posZ + entityitem.motionZ);
+
+    				
+    			}
+
+    			ItemStack itemstack = this.dropItemAndGetStack(entityitem);
+
+                if (traceItem)
+                {
+                    if (!itemstack.isEmpty())
+                    {
+                        this.addStat(StatList.ITEM_DROPPED.get(itemstack.getItem()), droppedItem.getCount());
+                    }
 
+                    this.addStat(StatList.DROP);
+                }
+
+    			return entityitem;
+    		}
+    	}
+    }
+    
+    @Override
+    public void spawnSweepParticles()
+    {
+    	VivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+    	if(vp==null || vp.isVR() == false){
+    		super.spawnSweepParticles();
+    	} else {
+    		//VIVECRAFT USE CONTROLLER - which controller? have to assume 0.
+
+    		Vec3d aim = vp.getControllerDir(0);
+    		float yaw = (float)Math.toDegrees(Math.atan2(aim.x, -aim.z));   
+
+    		double d0 = (double)(-MathHelper.sin(yaw * 0.017453292F));
+    		double d1 = (double)MathHelper.cos(yaw * 0.017453292F);
+
+    		Vec3d pos= vp.getControllerPos(0);
+
+    		if (this.world instanceof WorldServer) //has to be
+    		{
+    			((WorldServer)this.world).spawnParticle(Particles.SWEEP_ATTACK, pos.x + d0, pos.y , pos.z+ d1, 0, d0, 0.0D, d1, 0.0D);
+    		}
+    		//END
+    	}
+    }
+    
+    @Override
+    protected void updateItemUse(ItemStack stack, int eatingParticleCount)
+    {
+    	VivePlayer vp = NetworkHelper.vivePlayers.get(this.getUniqueID());
+    	if(vp==null || vp.isVR() == false){
+    		super.updateItemUse(stack, eatingParticleCount);;
+    	} else {
+    		if (!stack.isEmpty() && this.isHandActive())
+    		{
+    			if (stack.getUseAction() == EnumAction.DRINK)
+    			{
+    				this.playSound(SoundEvents.ENTITY_GENERIC_DRINK, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+    			}
+
+    			if (stack.getUseAction() == EnumAction.EAT)
+    			{
+    				for (int i = 0; i < eatingParticleCount; ++i)
+    				{
+    					Vec3d vec3d = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.1D, Math.random() * 0.1D + 0.1D, 0.0D);
+    					vec3d = vec3d.rotatePitch(-this.rotationPitch * 0.017453292F);
+    					vec3d = vec3d.rotateYaw(-this.rotationYaw * 0.017453292F);
+    					double d0 = (double)(-this.rand.nextFloat()) * 0.6D - 0.3D;
+    					Vec3d vec3d1 = new Vec3d(((double)this.rand.nextFloat() - 0.5D) * 0.3D, d0, 0.6D);
+    					vec3d1 = vec3d1.rotatePitch(-this.rotationPitch * 0.017453292F);
+    					vec3d1 = vec3d1.rotateYaw(-this.rotationYaw * 0.017453292F);
+
+    					vec3d1 = vec3d1.add(this.posX, this.posY + (double)this.getEyeHeight(), this.posZ);
+
+    					//VIVE
+    					EnumHand hand = getActiveHand();
+						if(hand == EnumHand.MAIN_HAND){
+							vec3d1 = vp.getControllerPos(0);             	
+						} else {
+							vec3d1 = vp.getControllerPos(1);             	
+						}
+    					//
+
+						this.world.spawnParticle(new ItemParticleData(Particles.ITEM, stack), vec3d1.x, vec3d1.y, vec3d1.z, vec3d.x, vec3d.y + 0.05D, vec3d.z);
+
+    				}
+
+    				this.playSound(SoundEvents.ENTITY_GENERIC_EAT, 0.5F + 0.5F * (float)this.rand.nextInt(2), (this.rand.nextFloat() - this.rand.nextFloat()) * 0.2F + 1.0F);
+    			}
+    		}
+    	}
+    }
+    
     public void teleport(WorldServer p_200619_1_, double x, double y, double z, float yaw, float pitch)
     {
         this.setSpectatingEntity(this);
