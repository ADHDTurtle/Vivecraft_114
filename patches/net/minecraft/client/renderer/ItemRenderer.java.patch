--- a/net/minecraft/client/renderer/ItemRenderer.java
+++ b/net/minecraft/client/renderer/ItemRenderer.java
@@ -5,6 +5,9 @@
 import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import org.lwjgl.opengl.GL14;
+
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.entity.EntityPlayerSP;
@@ -62,6 +65,12 @@
     private boolean renderModelEmissive = false;
     private static boolean renderItemGui = false;
 
+    //Vivecraft
+    public static boolean ismainhand = false;
+    public static boolean isfphand = false;
+    float fade = 1;
+    //
+    
     public ItemRenderer(TextureManager textureManagerIn, ModelManager modelManagerIn, ItemColors itemColorsIn)
     {
         this.textureManager = textureManagerIn;
@@ -141,11 +150,37 @@
         {
             GlStateManager.pushMatrix();
             GlStateManager.translatef(-0.5F, -0.5F, -0.5F);
+            EntityPlayerSP p = Minecraft.getMinecraft().player;
+            
+            if(p!=null && isfphand){
+              
+            	fade= p.getCooledAttackStrength(0)*.75f + .25f;
+        	
+            	if(p.isSneaking()) 
+                	fade =0.75f;
+                
+                if(p.isActiveItemStackBlocking() && p.getActiveItemStack() != stack) 
+                	fade =0.75f;   
+
+                if(stack.getItem() == Items.SHIELD)
+                	if(p.isActiveItemStackBlocking())
+                		fade = 1;
+                	else
+                		fade = 0.75f;
 
+                if(fade < 0.1) fade = 0.1f;
+                if(fade > 1) fade = 1f;
+                GlStateManager.enableBlend();
+                GL14.glBlendColor(1, 1, 1, fade);
+                GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.CONSTANT_ALPHA, GlStateManager.DestFactor.ONE_MINUS_CONSTANT_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+            }
+            
             if (model.isBuiltInRenderer())
             {
-                GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
-                GlStateManager.enableRescaleNormal();
+            	//VIVECRAFT - item partial transparency
+            	GlStateManager.color4f(1.0F, 1.0F, 1.0F, fade );
+            	//
+            	GlStateManager.enableRescaleNormal();
 
                 if (Reflector.ForgeItem_getTileEntityItemStackRenderer.exists())
                 {
@@ -189,6 +224,10 @@
                 }
             }
 
+            GL14.glBlendColor(1, 1, 1, 1);
+            GlStateManager.blendFuncSeparate(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA, GlStateManager.SourceFactor.ONE, GlStateManager.DestFactor.ZERO);
+            GlStateManager.disableBlend();
+            fade = 1;
             GlStateManager.popMatrix();
         }
     }
@@ -303,7 +342,23 @@
                 {
                     k = CustomColors.getColorFromItemStack(stack, bakedquad.getTintIndex(), k);
                 }
-
+                
+                //Vivecraft color overrides for custom items
+    			int b = (int) (fade * 255);
+
+    			int rev = (255 - b) >> 24;
+
+		    	k -= rev; //apply fade to tinted color.
+		
+		    	if (Minecraft.getMinecraft().jumpTracker.isBoots(stack))
+		    	{
+		    		k = makeColor(b, 0, 255, 0);
+		    	} else if (Minecraft.getMinecraft().climbTracker.isClaws(stack))
+		    	{
+		    		k = makeColor(b, 130, 0, 75);
+		    	}
+		    	//
+		    	
                 k = k | -16777216;
             }
 
@@ -644,4 +699,9 @@
     {
         this.itemModelMesher.rebuildCache();
     }
+    
+    //Vivecraft Additions
+    private int makeColor(int a, int r, int g, int b) {
+    	return  a << 24 | r << 16 | g << 8 | b;
+    }
 }
