--- a/net/minecraft/client/renderer/RenderGlobal.java
+++ b/net/minecraft/client/renderer/RenderGlobal.java
@@ -4,6 +4,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
+
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import java.io.IOException;
@@ -20,7 +21,6 @@
 import java.util.Map;
 import java.util.Random;
 import java.util.Set;
-import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockAbstractSkull;
@@ -61,7 +61,6 @@
 import net.minecraft.client.shader.ShaderLinkHelper;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
-import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.crash.ReportedException;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
@@ -104,7 +103,6 @@
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.dimension.Dimension;
 import net.minecraft.world.dimension.DimensionType;
-import net.optifine.BlockPosM;
 import net.optifine.CustomColors;
 import net.optifine.CustomSky;
 import net.optifine.DynamicLights;
@@ -122,6 +120,9 @@
 import net.optifine.util.RenderChunkUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.RenderPass;
+import org.vivecraft.settings.VRSettings;
 
 public class RenderGlobal implements IWorldEventListener, AutoCloseable, IResourceManagerReloadListener
 {
@@ -806,6 +807,10 @@
                                 {
                                     boolean flag3 = this.mc.getRenderViewEntity() instanceof EntityLivingBase && ((EntityLivingBase)this.mc.getRenderViewEntity()).isPlayerSleeping();
 
+                                    //Vivecraft
+                                    flag3 = mc.currentPass == RenderPass.THIRD && mc.vrSettings.displayMirrorMode == VRSettings.MIRROR_THIRD_PERSON;
+                                    //		
+
                                     if ((entity2 != this.mc.getRenderViewEntity() || this.mc.gameSettings.thirdPersonView != 0 || flag3) && (entity2.posY < 0.0D || entity2.posY >= 256.0D || this.world.isBlockLoaded(blockpos$pooledmutableblockpos.setPos(entity2))))
                                     {
                                         ++this.countEntitiesRendered;
@@ -816,9 +821,22 @@
                                             Shaders.nextEntity(entity2);
                                         }
 
+                                        //Vivecraft
+                                        if(entity2 == this.mc.getRenderViewEntity()) { //fix shaders shadow location.
+                                        	mc.entityRenderer.restoreRVEPos((EntityLivingBase) entity2);
+                                        }
+                                        //
+
                                         this.renderManager.renderEntityStatic(entity2, partialTicks, false);
                                         this.renderedEntity = null;
 
+                                        //Vivecraft
+                                        if(entity2 == this.mc.getRenderViewEntity()) {
+                                        	mc.entityRenderer.cacheRVEPos((EntityLivingBase) entity2);
+                                        	mc.entityRenderer.setupRVE();
+                                        }
+                                        //
+                                        
                                         if (this.isOutlineActive(entity2, entity, camera))
                                         {
                                             list.add(entity2);
@@ -1200,7 +1218,11 @@
         new BlockPos(MathHelper.floor(d3 / 16.0D) * 16, MathHelper.floor(d4 / 16.0D) * 16, MathHelper.floor(d5 / 16.0D) * 16);
         float f = entityIn.getPitch(partialTicks);
         float f1 = entityIn.getYaw(partialTicks);
-        this.displayListEntitiesDirty = this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || entityIn.posX != this.lastViewEntityX || entityIn.posY != this.lastViewEntityY || entityIn.posZ != this.lastViewEntityZ || (double)f != this.lastViewEntityPitch || (double)f1 != this.lastViewEntityYaw;
+        
+        //Vivecraft 
+        this.displayListEntitiesDirty = true; //this.displayListEntitiesDirty || !this.chunksToUpdate.isEmpty() || entityIn.posX != this.lastViewEntityX || entityIn.posY != this.lastViewEntityY || entityIn.posZ != this.lastViewEntityZ || (double)f != this.lastViewEntityPitch || (double)f1 != this.lastViewEntityYaw;
+        //
+        
         this.lastViewEntityX = entityIn.posX;
         this.lastViewEntityY = entityIn.posY;
         this.lastViewEntityZ = entityIn.posZ;
@@ -1431,6 +1453,7 @@
                     {
                         this.chunksToUpdate.add(renderchunk5);
                     }
+                    // OptiFine adds this
                     else if (!renderchunk5.isPlayerUpdate())
                     {
                         this.chunksToUpdateForced.add(renderchunk5);
@@ -1537,13 +1560,16 @@
                 this.prevRenderSortY = entityIn.posY;
                 this.prevRenderSortZ = entityIn.posZ;
                 int k = 0;
+                // OptiFine adds this
                 this.chunksToResortTransparency.clear();
 
                 for (RenderGlobal.ContainerLocalRenderInformation renderglobal$containerlocalrenderinformation : this.renderInfos)
                 {
                     if (renderglobal$containerlocalrenderinformation.renderChunk.compiledChunk.isLayerStarted(blockLayerIn) && k++ < 15)
                     {
+                        // OptiFine adds this
                         this.chunksToResortTransparency.add(renderglobal$containerlocalrenderinformation.renderChunk);
+                        //this.renderDispatcher.updateTransparencyLater(renderglobal$containerlocalrenderinformation.renderChunk);
                     }
                 }
             }
@@ -2336,6 +2362,7 @@
         finishTimeNano = (long)((double)finishTimeNano + 1.0E8D);
         this.displayListEntitiesDirty |= this.renderDispatcher.runChunkUploads(finishTimeNano);
 
+        // OptiFine adds this
         if (this.chunksToUpdateForced.size() > 0)
         {
             Iterator iterator = this.chunksToUpdateForced.iterator();
@@ -2373,7 +2400,7 @@
 
         double d1 = 0.0D;
         int i = Config.getUpdatesPerFrame();
-
+        
         if (!this.chunksToUpdate.isEmpty())
         {
             Iterator<RenderChunk> iterator1 = this.chunksToUpdate.iterator();
@@ -2401,6 +2428,7 @@
                 renderchunk1.clearNeedsUpdate();
                 iterator1.remove();
 
+                // OptiFine adds this
                 if (!flag1)
                 {
                     double d0 = 2.0D * RenderChunkUtils.getRelativeBufferSize(renderchunk1);
@@ -3144,6 +3172,8 @@
     {
         Random random = this.world.rand;
 
+        boolean playernear =  mc.player !=null && !mc.player.isDead && (mc.player.getPosition().distanceSq(blockPosIn) < 25); ///hmm sure why not.
+        
         switch (type)
         {
             case 1000:
@@ -3199,18 +3229,26 @@
                 break;
 
             case 1011:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1012:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_DOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1013:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_WOODEN_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1014:
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_FENCE_GATE_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3231,14 +3269,26 @@
                 break;
 
             case 1019:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1020:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_ATTACK_IRON_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
             case 1021:
+                if(playernear){ //this is just mean.
+                	MCOpenVR.triggerHapticPulse(0,750); 
+                	MCOpenVR.triggerHapticPulse(1,750); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, SoundCategory.HOSTILE, 2.0F, (random.nextFloat() - random.nextFloat()) * 0.2F + 1.0F, false);
                 break;
 
@@ -3267,10 +3317,17 @@
                 break;
 
             case 1030:
+                if(playernear){ 
+                	MCOpenVR.triggerHapticPulse(0,500); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_USE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
             case 1031:
+                if(playernear){ 
+                	MCOpenVR.triggerHapticPulse(0,1250); 
+                	MCOpenVR.triggerHapticPulse(1,1250); 
+                }
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_ANVIL_LAND, SoundCategory.BLOCKS, 0.3F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3291,6 +3348,9 @@
                 break;
 
             case 1036:
+
+                if(playernear)
+                	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                 this.world.playSound(blockPosIn, SoundEvents.BLOCK_IRON_TRAPDOOR_CLOSE, SoundCategory.BLOCKS, 1.0F, this.world.rand.nextFloat() * 0.1F + 0.9F, false);
                 break;
 
@@ -3344,7 +3404,8 @@
                     {
                         soundtype = (SoundType)Reflector.call(iblockstate.getBlock(), Reflector.ForgeBlock_getSoundType, Block.getStateById(data), this.world, blockPosIn, null);
                     }
-
+                    if(playernear)
+                    	MCOpenVR.triggerHapticPulse(0,250); //VIVECRAFT go thump.
                     this.world.playSound(blockPosIn, soundtype.getBreakSound(), SoundCategory.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F, false);
                 }
 
