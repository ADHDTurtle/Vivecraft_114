--- a/net/minecraft/client/renderer/entity/model/BoatModel.java
+++ b/net/minecraft/client/renderer/entity/model/BoatModel.java
@@ -1,9 +1,23 @@
 package net.minecraft.client.renderer.entity.model;
 
+import java.awt.Color;
+import java.util.UUID;
+
+import org.vivecraft.gameplay.OpenVRPlayer;
+import org.vivecraft.provider.MCOpenVR;
+import org.vivecraft.render.PlayerModelController;
+import org.vivecraft.settings.VRSettings;
+import org.vivecraft.utils.Quaternion;
+import org.vivecraft.utils.Vector3;
+
 import com.mojang.blaze3d.platform.GlStateManager;
+
+import net.minecraft.client.Minecraft;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.BoatEntity;
+import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.math.Vec3d;
 
 public class BoatModel extends EntityModel<BoatEntity>
 {
@@ -86,16 +100,62 @@
 
     protected void renderPaddle(BoatEntity boat, int paddle, float scale, float limbSwing)
     {
-        float f = boat.getRowingTime(paddle, limbSwing);
-        RendererModel renderermodel = this.paddles[paddle];
-        renderermodel.rotateAngleX = (float)MathHelper.clampedLerp((double)(-(float)Math.PI / 3F), (double) - 0.2617994F, (double)((MathHelper.sin(-f) + 1.0F) / 2.0F));
-        renderermodel.rotateAngleY = (float)MathHelper.clampedLerp((double)(-(float)Math.PI / 4F), (double)((float)Math.PI / 4F), (double)((MathHelper.sin(-f + 1.0F) + 1.0F) / 2.0F));
-
-        if (paddle == 1)
-        {
-            renderermodel.rotateAngleY = (float)Math.PI - renderermodel.rotateAngleY;
-        }
+    	float f = boat.getRowingTime(paddle, limbSwing);
+    	RendererModel renderermodel = this.paddles[paddle];
+    	Vec3d rArm = null;
+    	Vec3d lArm = null;
+
+    	if (boat.getControllingPassenger() instanceof PlayerEntity) {
+    		UUID playerId = ((PlayerEntity) boat.getControllingPassenger()).getGameProfile().getId();
+    		if (Minecraft.getInstance().player.getUniqueID().equals(playerId)) {
+    			lArm = MCOpenVR.controllerHistory[1].averagePosition(0.1);
+    			rArm = MCOpenVR.controllerHistory[0].averagePosition(0.1);
+    		} else {
+    			PlayerModelController.RotInfo rotInfo = PlayerModelController.getInstance().getRotationsForPlayer(playerId);
+    			if (rotInfo != null) {
+    				rArm = rotInfo.rightArmPos;
+    				lArm = rotInfo.leftArmPos;
+    			}
+    		}
+    	}
+
+    	if (rArm != null && lArm != null && Minecraft.getInstance().rowTracker.isActive(Minecraft.getInstance().player)) {
+    		//Debug debug=new Debug(boat.getPositionVector());
+    		//Attachment point converted from Model coordinates to boat-relative World coordinates
+    		Vec3d attachmentPoint = new Vec3d(paddles[paddle].rotationPointZ * scale, (paddles[paddle].rotationPointY + 15) * scale, paddles[paddle].rotationPointX * scale);
+
+    		Vec3d arm = paddle == 0 ? lArm : rArm;
+
+    		Quaternion boatRot = new Quaternion(boat.rotationPitch, -boat.rotationYaw, 0).normalized();
+    		Quaternion worldRot = new Quaternion(0, VRSettings.inst.vrWorldRotation, 0);
+
+    		Vec3d attachAbs = boat.getPositionVector().add(boatRot.multiply(attachmentPoint));
+    		Vec3d armAbs = OpenVRPlayer.get().roomOrigin.add(worldRot.multiply(arm));
+
+    		Vec3d armToPaddle = attachAbs.subtract(armAbs);
+
+    		Vector3 checkDir = paddle == 0 ? new Vector3(1, 0, 0) : new Vector3(-1, 0, 0);
+    		Quaternion toForward=Quaternion.createFromToVector(checkDir,new Vector3(0,0,1));
+
+    		Quaternion rotation = Quaternion.createFromToVector(new Vector3(0,0,1), new Vector3(toForward.multiply(boatRot.inverse().multiply(armToPaddle.normalize()))));
+
+    		float mult = paddle == 0 ? -1 : 1;
+
+    		Color c=paddle==0? Color.red: Color.green;
+
+    		renderermodel.rotateAngleX = (float) ( -Math.toRadians( rotation.toEuler().getPitch()));
+    		renderermodel.rotateAngleY = (float) ( mult * Math.toRadians( rotation.toEuler().getYaw()));
+    		renderermodel.rotateAngleZ = 0;
+
+    	} else {
+    		renderermodel.rotateAngleX = (float) MathHelper.clampedLerp(-1.0471975803375244D, -0.2617993950843811D, (double) ((MathHelper.sin(-f) + 1.0F) / 2.0F));
+    		renderermodel.rotateAngleY = (float) MathHelper.clampedLerp(-(Math.PI / 4D), (Math.PI / 4D), (double) ((MathHelper.sin(-f + 1.0F) + 1.0F) / 2.0F));
+    	}
+    	if (paddle == 1)
+    	{
+    		renderermodel.rotateAngleY = (float)Math.PI - renderermodel.rotateAngleY;
+    	}
 
-        renderermodel.render(scale);
+    	renderermodel.render(scale);
     }
 }
