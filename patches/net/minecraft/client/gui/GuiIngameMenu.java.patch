--- a/net/minecraft/client/gui/GuiIngameMenu.java
+++ b/net/minecraft/client/gui/GuiIngameMenu.java
@@ -1,114 +1,191 @@
 package net.minecraft.client.gui;
 
+import com.mtbs3d.minecrift.gui.settings.GuiQuickCommandsInGame;
+import com.mtbs3d.minecrift.settings.AutoCalibration;
+import com.mtbs3d.minecrift.utils.jkatvr;
+
 import net.minecraft.client.gui.achievement.GuiStats;
 import net.minecraft.client.gui.advancements.GuiScreenAdvancements;
+import net.minecraft.client.main.Main;
 import net.minecraft.client.multiplayer.WorldClient;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.realms.RealmsBridge;
 
 public class GuiIngameMenu extends GuiScreen
 {
-    /**
-     * Adds the buttons (and other controls) to the screen in question. Called when the GUI is displayed and when the
-     * window resizes, the buttonList is cleared beforehand.
-     */
-    protected void initGui()
-    {
-        int i = -16;
-        int j = 98;
-        GuiButton guibutton = this.addButton(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 120 + -16, I18n.format("menu.returnToMenu"))
-        {
-            public void onClick(double mouseX, double mouseY)
-            {
-                boolean flag = GuiIngameMenu.this.mc.isIntegratedServerRunning();
-                boolean flag1 = GuiIngameMenu.this.mc.isConnectedToRealms();
-                this.enabled = false;
-                GuiIngameMenu.this.mc.world.sendQuittingDisconnectingPacket();
-
-                if (flag)
-                {
-                    GuiIngameMenu.this.mc.loadWorld((WorldClient)null, new GuiDirtMessageScreen(I18n.format("menu.savingLevel")));
-                }
-                else
-                {
-                    GuiIngameMenu.this.mc.loadWorld((WorldClient)null);
-                }
-
-                if (flag)
-                {
-                    GuiIngameMenu.this.mc.displayGuiScreen(new GuiMainMenu());
-                }
-                else if (flag1)
-                {
-                    RealmsBridge realmsbridge = new RealmsBridge();
-                    realmsbridge.switchToRealms(new GuiMainMenu());
-                }
-                else
-                {
-                    GuiIngameMenu.this.mc.displayGuiScreen(new GuiMultiplayer(new GuiMainMenu()));
-                }
-            }
-        });
-
-        if (!this.mc.isIntegratedServerRunning())
-        {
-            guibutton.displayString = I18n.format("menu.disconnect");
-        }
-
-        this.addButton(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 24 + -16, I18n.format("menu.returnToGame"))
-        {
-            public void onClick(double mouseX, double mouseY)
-            {
-                GuiIngameMenu.this.mc.displayGuiScreen((GuiScreen)null);
-                GuiIngameMenu.this.mc.mouseHelper.grabMouse();
-            }
-        });
-        this.addButton(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + -16, 98, 20, I18n.format("menu.options"))
-        {
-            public void onClick(double mouseX, double mouseY)
-            {
-                GuiIngameMenu.this.mc.displayGuiScreen(new GuiOptions(GuiIngameMenu.this, GuiIngameMenu.this.mc.gameSettings));
-            }
-        });
-        GuiButton guibutton1 = this.addButton(new GuiButton(7, this.width / 2 + 2, this.height / 4 + 96 + -16, 98, 20, I18n.format("menu.shareToLan"))
-        {
-            public void onClick(double mouseX, double mouseY)
-            {
-                GuiIngameMenu.this.mc.displayGuiScreen(new GuiShareToLan(GuiIngameMenu.this));
-            }
-        });
-        guibutton1.enabled = this.mc.isSingleplayer() && !this.mc.getIntegratedServer().getPublic();
-        this.addButton(new GuiButton(5, this.width / 2 - 100, this.height / 4 + 48 + -16, 98, 20, I18n.format("gui.advancements"))
-        {
-            public void onClick(double mouseX, double mouseY)
-            {
-                GuiIngameMenu.this.mc.displayGuiScreen(new GuiScreenAdvancements(GuiIngameMenu.this.mc.player.connection.getAdvancementManager()));
-            }
-        });
-        this.addButton(new GuiButton(6, this.width / 2 + 2, this.height / 4 + 48 + -16, 98, 20, I18n.format("gui.stats"))
-        {
-            public void onClick(double mouseX, double mouseY)
-            {
-                GuiIngameMenu.this.mc.displayGuiScreen(new GuiStats(GuiIngameMenu.this, GuiIngameMenu.this.mc.player.getStatFileWriter()));
-            }
-        });
-    }
-
-    /**
-     * Called from the main game loop to update the screen.
-     */
-    public void tick()
-    {
-        super.tick();
-    }
-
-    /**
-     * Draws the screen and all the components in it.
-     */
-    public void render(int mouseX, int mouseY, float partialTicks)
-    {
-        this.drawDefaultBackground();
-        this.drawCenteredString(this.fontRenderer, I18n.format("menu.game"), this.width / 2, 40, 16777215);
-        super.render(mouseX, mouseY, partialTicks);
-    }
+	/**
+	 * Adds the buttons (and other controls) to the screen in question. Called when the GUI is displayed and when the
+	 * window resizes, the buttonList is cleared beforehand.
+	 */
+	protected void initGui()
+	{
+		int i = -16;
+		int j = 98;
+		GuiButton guibutton = this.addButton(new GuiButton(1, this.width / 2 - 100, this.height / 4 + 168 + -16, I18n.format("menu.returnToMenu"))
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				boolean flag = GuiIngameMenu.this.mc.isIntegratedServerRunning();
+				boolean flag1 = GuiIngameMenu.this.mc.isConnectedToRealms();
+				this.enabled = false;
+				GuiIngameMenu.this.mc.world.sendQuittingDisconnectingPacket();
+
+				if (flag)
+				{
+					GuiIngameMenu.this.mc.loadWorld((WorldClient)null, new GuiDirtMessageScreen(I18n.format("menu.savingLevel")));
+				}
+				else
+				{
+					GuiIngameMenu.this.mc.loadWorld((WorldClient)null);
+				}
+
+				if (flag)
+				{
+					GuiIngameMenu.this.mc.displayGuiScreen(new GuiMainMenu());
+				}
+				else if (flag1)
+				{
+					RealmsBridge realmsbridge = new RealmsBridge();
+					realmsbridge.switchToRealms(new GuiMainMenu());
+				}
+				else
+				{
+					GuiIngameMenu.this.mc.displayGuiScreen(new GuiMultiplayer(new GuiMainMenu()));
+				}
+			}
+		});
+
+		if (!this.mc.isIntegratedServerRunning())
+		{
+			guibutton.displayString = I18n.format("menu.disconnect");
+		}
+
+		this.addButton(new GuiButton(4, this.width / 2 - 100, this.height / 4 + 24 + -16, I18n.format("menu.returnToGame"))
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.displayGuiScreen((GuiScreen)null);
+				GuiIngameMenu.this.mc.mouseHelper.grabMouse();
+			}
+		});
+		this.addButton(new GuiButton(0, this.width / 2 - 100, this.height / 4 + 96 + -16, 98, 20, I18n.format("menu.options"))
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.displayGuiScreen(new GuiOptions(GuiIngameMenu.this, GuiIngameMenu.this.mc.gameSettings));
+			}
+		});
+		GuiButton guibutton1 = this.addButton(new GuiButton(7, this.width / 2 + 2, this.height / 4 + 96 + -16, 98, 20, I18n.format("menu.shareToLan"))
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.displayGuiScreen(new GuiShareToLan(GuiIngameMenu.this));
+			}
+		});
+		guibutton1.enabled = this.mc.isSingleplayer() && !this.mc.getIntegratedServer().getPublic();
+		this.addButton(new GuiButton(5, this.width / 2 - 100, this.height / 4 + 48 + -16, 98, 20, I18n.format("gui.advancements"))
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.displayGuiScreen(new GuiScreenAdvancements(GuiIngameMenu.this.mc.player.connection.getAdvancementManager()));
+			}
+		});
+		this.addButton(new GuiButton(6, this.width / 2 + 2, this.height / 4 + 48 + -16, 98, 20, I18n.format("gui.stats"))
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.displayGuiScreen(new GuiStats(GuiIngameMenu.this, GuiIngameMenu.this.mc.player.getStatFileWriter()));
+			}
+		});
+		
+		//VIVECRAFT
+		this.addButton(new GuiButton(100, this.width / 2 - 100, this.height / 4 + 72 + -16, 98, 20, "Chat")
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.displayGuiScreen(new GuiChat());    
+			}
+		});
+		this.addButton(new GuiButton(101, this.width / 2 + 2, this.height / 4 + 72 + -16, 98, 20, "Commands")
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.displayGuiScreen(new GuiQuickCommandsInGame());
+				GuiIngameMenu.this.initGui();
+			}
+		}); 
+		this.addButton(new GuiButton(102, this.width / 2 - 100, this.height / 4 + 120 + -16, 49, 20, "Overlay")
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.gameSettings.showDebugInfo = ! GuiIngameMenu.this.mc.gameSettings.showDebugInfo;
+				GuiIngameMenu.this.mc.displayGuiScreen(null);
+			}
+		}); 
+		this.addButton(new GuiButton(103, this.width / 2 - 50, this.height / 4 + 120 + -16, 49, 20, "Profiler")
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.gameSettings.showDebugProfilerChart = ! GuiIngameMenu.this.mc.gameSettings.showDebugProfilerChart;
+				GuiIngameMenu.this.mc.gameSettings.showDebugInfo = GuiIngameMenu.this.mc.gameSettings.showDebugProfilerChart;
+				GuiIngameMenu.this.mc.displayGuiScreen(null);
+			}
+		}); 
+		this.addButton(new GuiButton(104, this.width / 2 + 2, this.height / 4 + 120 + -16, 98, 20, "Screenshot")
+		{
+			public void onClick(double mouseX, double mouseY)
+			{
+				GuiIngameMenu.this.mc.displayGuiScreen(null);
+				GuiIngameMenu.this.mc.grabScreenShot = 10;
+			}
+		});
+		//        if(Reflector.forgeExists())
+		//        this.addButton(new GuiButton(12, this.width / 2 - 50, this.height / 4 + 144 + -16, 98, 20, "Mod Options")
+		//        {
+		//            public void onClick(double mouseX, double mouseY)
+		//            {
+		//				Reflector.call(Reflector.call(Reflector.FMLClientHandler_instance), Reflector.FMLClientHandler_showInGameModOptions,new Object[]{this});
+		//            }
+		//        }); 
+		if (this.mc.vrSettings.seated)
+			this.addButton(new GuiButton(105, this.width / 2 - 100, this.height / 4 + 144 + -16, 98, 20, "Calibrate Height")
+			{
+				public void onClick(double mouseX, double mouseY)
+				{
+					AutoCalibration.calibrateManual();
+					GuiIngameMenu.this.mc.vrSettings.saveOptions();
+					GuiIngameMenu.this.mc.displayGuiScreen((GuiScreen)null);
+					//GuiIngameMenu.this.mc.setIngameFocus() ???????
+				}
+			});
+		if (Main.katvr)
+			this.addButton(new GuiButton(106, this.width / 2 + 100, this.height / 4 + -16, 98, 20, "Align KAT WALK")
+			{
+				public void onClick(double mouseX, double mouseY)
+				{
+					jkatvr.resetYaw(mc.vrPlayer.vrdata_room_pre.hmd.getYaw());
+					GuiIngameMenu.this.mc.displayGuiScreen((GuiScreen)null);
+					//GuiIngameMenu.this.mc.setIngameFocus(); ????
+				}
+			});
+		//
+	}
+
+	/**
+	 * Called from the main game loop to update the screen.
+	 */
+	public void tick()
+	{
+		super.tick();
+	}
+
+	/**
+	 * Draws the screen and all the components in it.
+	 */
+	public void render(int mouseX, int mouseY, float partialTicks)
+	{
+		this.drawDefaultBackground();
+		this.drawCenteredString(this.fontRenderer, I18n.format("menu.game"), this.width / 2, 40, 16777215);
+		super.render(mouseX, mouseY, partialTicks);
+	}
 }
