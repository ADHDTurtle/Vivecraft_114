--- a/net/minecraft/client/GameSettings.java
+++ b/net/minecraft/client/GameSettings.java
@@ -64,6 +64,7 @@
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.provider.MCOpenVR;
 
 public class GameSettings
 {
@@ -114,16 +115,16 @@
     private final Map<SoundCategory, Float> soundLevels = Maps.newEnumMap(SoundCategory.class);
     public boolean useNativeTransport = true;
     public AttackIndicatorStatus attackIndicator = AttackIndicatorStatus.CROSSHAIR;
-    public TutorialSteps tutorialStep = TutorialSteps.MOVEMENT;
+    public TutorialSteps tutorialStep = TutorialSteps.NONE;
     public int biomeBlendRadius = 2;
     public double mouseWheelSensitivity = 1.0D;
     public int glDebugVerbosity = 1;
-    public boolean autoJump = true;
+    public boolean autoJump = false;
     public boolean autoSuggestCommands = true;
     public boolean chatColor = true;
     public boolean chatLinks = true;
     public boolean chatLinksPrompt = true;
-    public boolean vsync = true;
+    public boolean vsync = false;
     public boolean entityShadows = true;
     public boolean forceUnicodeFont;
     public boolean invertMouse;
@@ -224,7 +225,7 @@
     public int ofTranslucentBlocks = 0;
     public boolean ofDynamicFov = true;
     public boolean ofAlternateBlocks = true;
-    public int ofDynamicLights = 3;
+    public int ofDynamicLights = 2;
     public boolean ofCustomEntityModels = true;
     public boolean ofCustomGuis = true;
     public boolean ofShowGlErrors = true;
@@ -272,6 +273,9 @@
     {
         this.setForgeKeybindProperties();
         this.keyBindings = ArrayUtils.addAll(new KeyBinding[] {this.keyBindAttack, this.keyBindUseItem, this.keyBindForward, this.keyBindLeft, this.keyBindBack, this.keyBindRight, this.keyBindJump, this.keyBindSneak, this.keyBindSprint, this.keyBindDrop, this.keyBindInventory, this.keyBindChat, this.keyBindPlayerList, this.keyBindPickBlock, this.keyBindCommand, this.keyBindScreenshot, this.keyBindTogglePerspective, this.keyBindSmoothCamera, this.keyBindFullscreen, this.keyBindSpectatorOutlines, this.keyBindSwapHands, this.keyBindSaveToolbar, this.keyBindLoadToolbar, this.keyBindAdvancements}, this.keyBindsHotbar);
+        //Vivecraft
+        this.keyBindings = MCOpenVR.initializeBindings(this.keyBindings);
+        //
         this.difficulty = Difficulty.NORMAL;
         this.lastServer = "";
         this.fov = 70.0D;
@@ -1020,7 +1024,7 @@
             {
                 if (i >= aint[j])
                 {
-                    this.ofAaLevel = aint[j];
+                    this.ofAaLevel = 0; //Vivecraft aint[j];
                 }
             }
 
@@ -1468,7 +1472,7 @@
                 return;
             }
 
-            this.ofFastRender = !this.ofFastRender;
+            this.ofFastRender = false; //Vivecraft !this.ofFastRender;
 
             if (this.ofFastRender)
             {
@@ -2583,6 +2587,15 @@
             KeyUtils.fixKeyConflicts(this.keyBindings, new KeyBinding[] {this.ofKeyBindZoom});
             KeyBinding.resetKeyBindingArrayAndHash();
             bufferedreader.close();
+            
+            //Vivecraft important.
+            this.ofFastRender = false;
+            this.ofUseFbo = true;
+            this.ofUseVbo = true;
+            this.ofAaLevel = 0;
+            this.ofAfLevel = 1;
+            //
+            
         }
         catch (Exception exception11)
         {
@@ -2965,3 +2978,4 @@
         resourcePackListIn.setEnabledPacks(set);
     }
 }
+
