--- a/net/minecraft/client/network/play/ClientPlayNetHandler.java
+++ b/net/minecraft/client/network/play/ClientPlayNetHandler.java
@@ -1,5 +1,6 @@
 package net.minecraft.client.network.play;
 
+import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.mojang.authlib.GameProfile;
@@ -280,6 +281,7 @@
 import net.minecraft.util.math.MutableBoundingBox;
 import net.minecraft.util.math.SectionPos;
 import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.registry.Registry;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
 import net.minecraft.world.Explosion;
@@ -293,6 +295,10 @@
 import net.minecraft.world.storage.MapData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.vivecraft.api.NetworkHelper;
+import org.vivecraft.api.NetworkHelper.PacketDiscriminators;
+import org.vivecraft.gameplay.OpenVRPlayer;
+import org.vivecraft.render.PlayerModelController;
 
 public class ClientPlayNetHandler implements IClientPlayNetHandler
 {
@@ -322,8 +328,13 @@
         this.profile = p_i3241_4_;
         this.advancementManager = new ClientAdvancementManager(p_i3241_1_);
         this.clientSuggestionProvider = new ClientSuggestionProvider(this, p_i3241_1_);
+        //VIVECRAFT
+        NetworkHelper.serverAllowsClimbey = false;
+        NetworkHelper.serverWantsData = false;
+        NetworkHelper.serverSupportsDirectTeleport = false;
+        //
     }
-
+    
     public ClientSuggestionProvider getSuggestionProvider()
     {
         return this.clientSuggestionProvider;
@@ -380,6 +391,15 @@
         this.client.gameSettings.sendSettingsToServer();
         this.netManager.sendPacket(new CCustomPayloadPacket(CCustomPayloadPacket.BRAND, (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
         this.client.getMinecraftGame().func_216814_a();
+    	// VIVE START - ask server if it's running this mod
+    	byte[] version = Minecraft.getInstance().minecriftVerString.getBytes(Charsets.UTF_8);
+    	String s = NetworkHelper.channel.toString();
+    	PacketBuffer pb = new PacketBuffer(Unpooled.buffer());
+    	pb.writeBytes(s.getBytes());
+    	this.netManager.sendPacket(new CCustomPayloadPacket(new ResourceLocation("minecraft:register"), pb));
+    	this.netManager.sendPacket(NetworkHelper.getVivecraftClientPacket(PacketDiscriminators.VERSION, version));
+    	this.client.vrPlayer.teleportWarningTimer = 20 * 3;
+    	// VIVE END - ask server if it's running this mod
     }
 
     /**
@@ -943,6 +963,10 @@
     public void handleDisconnect(SDisconnectPacket packetIn)
     {
         this.netManager.closeChannel(packetIn.getReason());
+    	// VIVE START - no longer on a vanilla server, reset restricted state
+        this.client.vrPlayer.setTeleportSupported(false);
+        this.client.vrPlayer.setTeleportOverride(false);
+    	// VIVE END - no longer on a vanilla server, reset restricted state  
     }
 
     /**
@@ -1142,7 +1166,9 @@
 
                     if (entity1 == this.client.player && !flag)
                     {
-                        this.client.ingameGUI.setOverlayMessage(I18n.format("mount.onboard", this.client.gameSettings.keyBindSneak.getLocalizedName()), false);
+                    	//Vivecraft - use key name, not keyboard key
+                        this.client.ingameGUI.setOverlayMessage(I18n.format("mount.onboard", this.client.gameSettings.keyBindSneak.getKeyDescription()), false);
+                        //
                     }
                 }
             }
@@ -1361,7 +1387,7 @@
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
         Container container = null;
-        PlayerEntity playerentity = this.client.player;
+        ClientPlayerEntity playerentity = this.client.player;
 
         if (packetIn.getWindowId() == 0)
         {
@@ -1376,6 +1402,9 @@
         {
             this.sendPacket(new CConfirmTransactionPacket(packetIn.getWindowId(), packetIn.getActionNumber(), true));
         }
+        
+        playerentity.confirmTransaction(packetIn.getActionNumber(),packetIn.getWindowId(),packetIn.wasAccepted());
+
     }
 
     /**
@@ -2357,6 +2386,60 @@
 
                 this.client.debugRenderer.field_217741_m.func_217692_a(pointofinterestdebugrenderer$braininfo);
             }
+    		else if (resourcelocation.getNamespace().equalsIgnoreCase("vivecraft"))
+    		{ 			
+    			// VIVE START - server told us that it has this mod too, allow extended reach, etc.
+    			if (resourcelocation.getPath().equalsIgnoreCase("data"))
+    			{ 
+
+    				byte db = packetbuffer.readByte();
+    				PacketDiscriminators dis = PacketDiscriminators.values()[db];
+
+    				switch (dis){
+    				case VERSION:
+    					String v = packetbuffer.readString(1024);
+    					this.client.vrPlayer.setTeleportSupported(true);
+    					this.client.vrPlayer.teleportWarningTimer = -1;
+    					this.client.printChatMessage("Vivecraft server mod detected: " +  v);
+    					break;
+    				case REQUESTDATA:
+    					NetworkHelper.serverWantsData = true;
+    					break;
+    				case CLIMBING:
+    					NetworkHelper.serverAllowsClimbey = packetbuffer.readBoolean();
+    					if (packetbuffer.readableBytes() > 0) {
+                            Minecraft.getInstance().climbTracker.serverblockmode = packetbuffer.readByte();
+                            Minecraft.getInstance().climbTracker.blocklist.clear();
+                            while (packetbuffer.readableBytes() > 0) {
+                                String name = packetbuffer.readString(16384);
+                                Block block = Registry.BLOCK.getOrDefault(new ResourceLocation(name));
+                                if (block != null)
+                                    Minecraft.getInstance().climbTracker.blocklist.add(block);
+                            }
+                        }
+    					break;
+    				case TELEPORT:
+    					NetworkHelper.serverSupportsDirectTeleport = true;
+    					break;
+    				case UBERPACKET:
+    					Long hi = packetbuffer.readLong();
+    					Long low = packetbuffer.readLong();
+    					byte[] hmd = new byte[29];
+    					byte[] c0 = new byte[29];
+    					byte[] c1 = new byte[29];
+    					packetbuffer.readBytes(29).getBytes(0, hmd);
+    					packetbuffer.readBytes(29).getBytes(0, c0);
+    					packetbuffer.readBytes(29).getBytes(0, c1);
+    					UUID u = new UUID(hi, low);
+
+    					PlayerModelController.getInstance().Update(u, hmd, c0, c1);    		
+    					break;
+    				default:
+    					break;
+    				}
+    			}
+    		}
+    		// VIVE END
             else
             {
                 LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
@@ -2736,4 +2819,14 @@
     {
         return this.field_217289_q;
     }
+    //VIVECRAFT Additions
+    boolean tryParseInt(String value) {  
+    	try {  
+    		Integer.parseInt(value);  
+    		return true;  
+    	} catch (NumberFormatException e) {  
+    		return false;  
+    	}  
+    }
+    //
 }
