--- a/net/minecraft/entity/item/EntityBoat.java
+++ b/net/minecraft/entity/item/EntityBoat.java
@@ -5,6 +5,7 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockLilyPad;
 import net.minecraft.block.state.IBlockState;
+import net.minecraft.client.Minecraft;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EntityType;
@@ -922,41 +923,109 @@
 
     private void controlBoat()
     {
-        if (this.isBeingRidden())
-        {
-            float f = 0.0F;
-
-            if (this.leftInputDown)
-            {
-                this.deltaRotation += -1.0F;
-            }
-
-            if (this.rightInputDown)
-            {
-                ++this.deltaRotation;
-            }
-
-            if (this.rightInputDown != this.leftInputDown && !this.forwardInputDown && !this.backInputDown)
-            {
-                f += 0.005F;
-            }
-
-            this.rotationYaw += this.deltaRotation;
-
-            if (this.forwardInputDown)
-            {
-                f += 0.04F;
-            }
-
-            if (this.backInputDown)
-            {
-                f -= 0.005F;
-            }
-
-            this.motionX += (double)(MathHelper.sin(-this.rotationYaw * 0.017453292F) * f);
-            this.motionZ += (double)(MathHelper.cos(this.rotationYaw * 0.017453292F) * f);
-            this.setPaddleState(this.rightInputDown && !this.leftInputDown || this.forwardInputDown, this.leftInputDown && !this.rightInputDown || this.forwardInputDown);
-        }
+    	if (this.isBeingRidden())
+    	{
+    		float f = 0.0F;
+
+    		if (this.leftInputDown)
+    		{
+    			this.deltaRotation += -1.0F;
+    		}
+
+    		if (this.rightInputDown)
+    		{
+    			++this.deltaRotation;
+    		}
+
+    		if (this.rightInputDown != this.leftInputDown && !this.forwardInputDown && !this.backInputDown)
+    		{
+    			f += 0.005F;
+    		}
+
+    		this.rotationYaw += this.deltaRotation;
+
+    		if (this.forwardInputDown)
+    		{
+    			f += 0.04F;
+    		}
+
+    		if (this.backInputDown)
+    		{
+    			f -= 0.005F;
+    		}
+
+    		//Vivecraft
+    		Minecraft mc = Minecraft.getMinecraft();
+
+    		if(this.forwardInputDown && !mc.vrSettings.seated){
+    			//controller-based
+    			float yaw = Minecraft.getMinecraft().vrPlayer.vrdata_world_pre.getController(1).getYaw();          
+    			if(mc.vrSettings.vehicleRotation){
+    				//tank controls
+    				float end = this.rotationYaw % 360;
+    				float start = yaw;
+    				float difference = Math.abs(end - start);
+
+    				if (difference > 180)
+    					if (end > start)
+    						start += 360;
+    					else
+    						end += 360;
+
+    				difference = end - start;
+
+    				f = 0;
+
+    				if (Math.abs(difference) < 30){
+    					f = 0.04f;
+    				} 
+    				else if (Math.abs(difference) > 150) {
+    					f = -0.005F;
+    				}
+    				else if(difference < 0){
+    					this.deltaRotation +=1;
+    					f = 0.005f;
+    				} else if(difference > 0) {
+    					this.deltaRotation -=1;
+    					f = 0.005f;
+    				}
+
+    				f*=0.5;
+
+    				this.motionX += (double)(MathHelper.sin(-this.rotationYaw* 0.017453292F) * f);
+    				this.motionZ += (double)(MathHelper.cos(this.rotationYaw * 0.017453292F) * f);
+    			} else {
+    				//point to move
+    				this.motionX += (double)(MathHelper.sin(-yaw* 0.017453292F) * f);
+    				this.motionZ += (double)(MathHelper.cos(yaw * 0.017453292F) * f);
+    				this.rotationYaw =yaw;
+    			}
+
+    		} else {
+    			//roomscale or vanilla behavior
+    			if(mc.rowTracker.isRowing() && !mc.vrSettings.seated){
+    				this.deltaRotation += mc.rowTracker.forces[0] *50;
+    				this.deltaRotation -= mc.rowTracker.forces[1] *50;
+
+    				if (deltaRotation < 0) this.leftInputDown = true;
+    				if (deltaRotation > 0) this.rightInputDown = true;
+
+
+    				f=(float)(mc.rowTracker.forces[0] + mc.rowTracker.forces[1]);
+    				if(f > 0.005) this.forwardInputDown = true;
+
+
+    				this.motionX += (double)(MathHelper.sin(-this.rotationYaw * 0.017453292F) * f);
+    				this.motionZ += (double)(MathHelper.cos(this.rotationYaw * 0.017453292F) * f);
+    			}else{
+    				//default boat (seated mode)
+    				this.motionX += (double)(MathHelper.sin(-this.rotationYaw * 0.017453292F) * f);
+    				this.motionZ += (double)(MathHelper.cos(this.rotationYaw * 0.017453292F) * f);
+    			}
+    		}
+    		//
+    		this.setPaddleState(this.rightInputDown && !this.leftInputDown || this.forwardInputDown, this.leftInputDown && !this.rightInputDown || this.forwardInputDown);
+    	}
     }
 
     public void updatePassenger(Entity passenger)
