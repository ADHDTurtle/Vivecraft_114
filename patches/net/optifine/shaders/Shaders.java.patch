--- a/net/optifine/shaders/Shaders.java
+++ b/net/optifine/shaders/Shaders.java
@@ -118,6 +118,8 @@
 import org.lwjgl.opengl.GL30;
 import org.lwjgl.opengl.GLCapabilities;
 
+import com.mtbs3d.minecrift.render.renderPass;
+
 public class Shaders
 {
     static Minecraft mc;
@@ -335,7 +337,7 @@
     static int usedShadowDepthBuffers = 0;
     static int usedColorAttachs = 0;
     static int usedDrawBuffers = 0;
-    static int dfb = 0;
+    public static int dfb = 0;
     static int sfb = 0;
     private static int[] gbuffersFormat = new int[8];
     public static boolean[] gbuffersClear = new boolean[8];
@@ -499,7 +501,7 @@
     static final FloatBuffer tempMatrixDirectBuffer = nextFloatBuffer(16);
     static final FloatBuffer tempDirectFloatBuffer = nextFloatBuffer(16);
     static final IntBuffer dfbColorTextures = nextIntBuffer(16);
-    static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
+    public static final IntBuffer dfbDepthTextures = nextIntBuffer(3);
     static final IntBuffer sfbColorTextures = nextIntBuffer(8);
     static final IntBuffer sfbDepthTextures = nextIntBuffer(2);
     static final IntBuffer dfbDrawBuffers = nextIntBuffer(8);
@@ -514,6 +516,11 @@
     public static int[] entityData = new int[32];
     public static int entityDataIndex = 0;
 
+    //Vivecraft
+    static float[] sunPositionT = new float[4];
+    static float[] moonPositionT = new float[4];
+    //
+    
     private static ByteBuffer nextByteBuffer(int size)
     {
         ByteBuffer bytebuffer = bigBuffer;
@@ -3373,8 +3380,14 @@
                 setProgramUniform1f(uniform_viewWidth, (float)renderWidth);
                 setProgramUniform1f(uniform_viewHeight, (float)renderHeight);
                 setProgramUniform1f(uniform_near, 0.05F);
-                setProgramUniform1f(uniform_far, (float)(mc.gameSettings.renderDistanceChunks * 16));
-                setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+                setProgramUniform1f(uniform_far, (float)(mc.gameSettings.renderDistanceChunks * 16));             
+                if(Minecraft.getMinecraft().currentPass == renderPass.Third) {
+                    setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+                    setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+                }else {
+                    setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+                    setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+                }
                 setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
                 setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
                 setProgramUniform3f(uniform_upPosition, upPosition[0], upPosition[1], upPosition[2]);
@@ -3744,8 +3757,8 @@
     {
         renderDisplayWidth = mc.mainWindow.getFramebufferWidth();
         renderDisplayHeight = mc.mainWindow.getFramebufferHeight();
-        renderWidth = Math.round((float)renderDisplayWidth * configRenderResMul);
-        renderHeight = Math.round((float)renderDisplayHeight * configRenderResMul);
+        renderWidth = renderDisplayWidth; //Vivecraft Math.round((float)renderDisplayWidth * configRenderResMul);
+        renderHeight = renderDisplayWidth; //Vivecraft Math.round((float)renderDisplayHeight * configRenderResMul);
         setupFrameBuffer();
     }
 
@@ -4241,7 +4254,7 @@
         {
             checkGLError("shadow clear pre");
             EXTFramebufferObject.glFramebufferTexture2DEXT(36160, 36096, 3553, sfbDepthTextures.get(0), 0);
-            GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
             GL20.glDrawBuffers(ProgramShadow.getDrawBuffers());
             checkFramebufferStatus("shadow clear");
             GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
@@ -4257,7 +4270,7 @@
 
                 if (vector4f != null)
                 {
-                    GL11.glClearColor(vector4f.getX(), vector4f.getY(), vector4f.getZ(), vector4f.getW());
+                	GlStateManager.clearColor(vector4f.getX(), vector4f.getY(), vector4f.getZ(), vector4f.getW());
                 }
 
                 if (dfbColorTexturesFlip.isChanged(0))
@@ -4274,7 +4287,7 @@
 
             if (gbuffersClear[1])
             {
-                GL11.glClearColor(1.0F, 1.0F, 1.0F, 1.0F);
+            	GlStateManager.clearColor(1.0F, 1.0F, 1.0F, 1.0F);
                 Vector4f vector4f2 = gbuffersClearColor[1];
 
                 if (vector4f2 != null)
@@ -4482,23 +4495,34 @@
 
     public static void postCelestialRotate()
     {
-        FloatBuffer floatbuffer = tempMatrixDirectBuffer;
-        floatbuffer.clear();
-        GL11.glGetFloatv(2982, floatbuffer);
-        floatbuffer.get(tempMat, 0, 16);
-        SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
-        SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
-        System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
-        setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
-        setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
-        setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
-
-        if (customUniforms != null)
-        {
-            customUniforms.update();
-        }
+    	FloatBuffer floatbuffer = tempMatrixDirectBuffer;
+    	floatbuffer.clear();
+    	GL11.glGetFloatv(2982, floatbuffer);
+    	floatbuffer.get(tempMat, 0, 16);
+    	if(Minecraft.getMinecraft().currentPass == renderPass.Third) {
+    		//Vivecraft
+    		SMath.multiplyMat4xVec4(sunPositionT, tempMat, sunPosModelView);
+    		SMath.multiplyMat4xVec4(moonPositionT, tempMat, moonPosModelView);
+    		System.arraycopy(shadowAngle == sunAngle ? sunPositionT : moonPosition, 0, shadowLightPosition, 0, 3);
+    		setProgramUniform3f(uniform_sunPosition, sunPositionT[0], sunPositionT[1], sunPositionT[2]);
+    		setProgramUniform3f(uniform_moonPosition, moonPositionT[0], moonPositionT[1], moonPositionT[2]);
+    		setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+    		//
+    	}
+    	else {
+    		SMath.multiplyMat4xVec4(sunPosition, tempMat, sunPosModelView);
+    		SMath.multiplyMat4xVec4(moonPosition, tempMat, moonPosModelView);
+    		System.arraycopy(shadowAngle == sunAngle ? sunPosition : moonPosition, 0, shadowLightPosition, 0, 3);
+    		setProgramUniform3f(uniform_sunPosition, sunPosition[0], sunPosition[1], sunPosition[2]);
+    		setProgramUniform3f(uniform_moonPosition, moonPosition[0], moonPosition[1], moonPosition[2]);
+    		setProgramUniform3f(uniform_shadowLightPosition, shadowLightPosition[0], shadowLightPosition[1], shadowLightPosition[2]);
+    	}
+    	if (customUniforms != null)
+    	{
+    		customUniforms.update();
+    	}
 
-        checkGLError("postCelestialRotate");
+    	checkGLError("postCelestialRotate");
     }
 
     public static void setUpPosition()
@@ -4536,7 +4560,7 @@
 
     public static void drawComposite()
     {
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+    	GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
         GL11.glBegin(GL11.GL_QUADS);
         GL11.glTexCoord2f(0.0F, 0.0F);
         GL11.glVertex3f(0.0F, 0.0F, 0.0F);
@@ -4623,7 +4647,7 @@
             GL11.glPushMatrix();
             GL11.glLoadIdentity();
             GL11.glOrtho(0.0D, 1.0D, 0.0D, 1.0D, 0.0D, 1.0D);
-            GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+            GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
             GlStateManager.enableTexture2D();
             GlStateManager.disableAlphaTest();
             GlStateManager.disableBlend();
@@ -4782,9 +4806,9 @@
         OpenGlHelper.glFramebufferTexture2D(OpenGlHelper.GL_FRAMEBUFFER, OpenGlHelper.GL_COLOR_ATTACHMENT0, 3553, mc.getFramebuffer().framebufferTexture, 0);
         GL11.glViewport(0, 0, mc.mainWindow.getFramebufferWidth(), mc.mainWindow.getFramebufferHeight());
         GlStateManager.depthMask(true);
-        GL11.glClearColor(clearColorR, clearColorG, clearColorB, 1.0F);
+        GlStateManager.clearColor(clearColorR, clearColorG, clearColorB, 1.0F);
         GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);
-        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
+        GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
         GlStateManager.enableTexture2D();
         GlStateManager.disableAlphaTest();
         GlStateManager.disableBlend();
